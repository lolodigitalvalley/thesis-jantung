<?php
defined('BASEPATH') or exit('No direct script access allowed');

class Som_learning extends Pakar_Controller 
{

    protected $page_header = 'Self Organizing Map';
    protected $metode      = 'som';

    public function __construct()
    {
        parent::__construct();

        $this->load->model(array('gejala_model' => 'gejala', 'bobot_gejala_model' => 'bobot_gejala', 'basis_kasus_model' => 'basis_kasus', 'kasus_detail_model' => 'kasus_detail', 'klaster_model' => 'klaster', 'pusat_klaster_model' => 'pusat_klaster', 'inisiasi_klaster_model' => 'inisiasi_klaster', 'centroids_som_model' => 'centroid'));
        $this->load->library('cluster_lib');
    }

    public function index()
    {
        $data['page_header']   = $this->page_header;
        $data['breadcrumb']    = $this->page_header;
        $data['panel_heading'] = 'Inisiasi SOM';
        $data['page']          = 'index';
        $this->frontend->view('som_v', $data);
    }

    public function training()
    {
        $learningRate   = $this->input->post('learningRate');
        $toLearningRate = $this->input->post('toLearningRate');
        $numCluster     = $this->input->post('numCluster');
        $maxIterasi     = $this->input->post('maxIterasi');

        /*
        $weights         = $this->input->post('weights');
        $weights         = json_decode($weights);

        if(empty($weights)){
        $this->session->set_flashdata('error', 'You must generate weights');
        redirect(site_url('som_learning'), 'refresh');
        }

        if(empty($learningRate)) $learningRate = 0.5;
        if(empty($toLearningRate)) $toLearningRate = 0.6;
        if(empty($numCluster)) $numCluster = 10;
        if(empty($maxIterasi)) $maxIterasi = 10;

        /*
        $weights = array(0=>array(0=>1.1667, 1=>57.375, 2=>0, 3=>0, 4=>0, 5=>1.375, 6=>0, 7=>0, 8=>0, 9=>0, 10=>0, 11=>0.5, 12=>0, 13=>0.0833, 14=>1.1667, 15=>0, 16=>0, 17=>0.5, 18=>0, 19=>3.5, 20=>0.125, 21=>2.75, 22=>3.75, 23=>2.3333, 24=>0, 25=>0.3333, 26=>0.0833, 27=>0, 28=>0, 29=>0, 30=>0, 31=>0, 32=>0.1667, 33=>0, 34=>3.2083, 35=>4.0833, 36=>2.3333, 37=>0, 38=>0, 39=>0, 40=>0.8333, 41=>0, 42=>0, 43=>0, 44=>0, 45=>0, 46=>0, 47=>3.25, 48=>3.3333, 49=>0, 50=>2.2917, 51=>2.5, 52=>0, 53=>0.0833, 54=>1.75, 55=>2.9167, 56=>0),
        1=>array(0=>1.3684, 1=>41.2105, 2=>2.8421, 3=>0.4211, 4=>0, 5=>0.2105, 6=>0.5263, 7=>0.1579, 8=>2.5263, 9=>1.5789, 10=>0, 11=>1.8947, 12=>0.9474, 13=>2.8947, 14=>0.2632, 15=>0, 16=>0, 17=>0.2632, 18=>0, 19=>2, 20=>0, 21=>0, 22=>0, 23=>0, 24=>3.3684, 25=>0, 26=>0, 27=>0, 28=>0.1053, 29=>0.5263, 30=>0, 31=>0, 32=>0.1053, 33=>0.3158, 34=>0, 35=>0.1053, 36=>0, 37=>0.1053, 38=>0, 39=>0.0526, 40=>4, 41=>1.5789, 42=>0, 43=>0, 44=>0, 45=>0, 46=>0, 47=>0, 48=>1.8421, 49=>2.9474, 50=>0, 51=>0, 52=>0, 53=>0, 54=>0, 55=>0, 56=>0),
        2=>array(0=>1.4444, 1=>58.5556, 2=>0.2222, 3=>0.2222, 4=>0, 5=>0, 6=>0, 7=>0.2222, 8=>0, 9=>0, 10=>0, 11=>0.6667, 12=>0.6667, 13=>0, 14=>0, 15=>0, 16=>0, 17=>0.2222, 18=>0, 19=>6.2222, 20=>0, 21=>0, 22=>0, 23=>0, 24=>0, 25=>0, 26=>0, 27=>0, 28=>0, 29=>0, 30=>0, 31=>0, 32=>0, 33=>0, 34=>0, 35=>0, 36=>0, 37=>7.1111, 38=>0, 39=>0, 40=>2.6667, 41=>0, 42=>4.6667, 43=>4.6667, 44=>0, 45=>0, 46=>0.2222, 47=>0, 48=>0, 49=>0, 50=>7, 51=>0, 52=>0, 53=>2.6667, 54=>0.8889, 55=>1.6667, 56=>0),
        3=>array(0=>1.4375, 1=>59.2917, 2=>0.6042, 3=>0.125, 4=>0.2917, 5=>0.1667, 6=>1.9792, 7=>0, 8=>0, 9=>0, 10=>2.125, 11=>0, 12=>3.4792, 13=>2.4792, 14=>0.3333, 15=>0, 16=>0.2292, 17=>0.625, 18=>0.3333, 19=>0.2292, 20=>0, 21=>0, 22=>0, 23=>0, 24=>0, 25=>0, 26=>0, 27=>0, 28=>0, 29=>1.75, 30=>0, 31=>0.0625, 32=>0, 33=>1.4167, 34=>0, 35=>0.0417, 36=>0, 37=>0, 38=>0, 39=>0, 40=>5.4167, 41=>4.1667, 42=>0, 43=>0, 44=>4.3333, 45=>3.375, 46=>1.75, 47=>1.625, 48=>3.9375, 49=>0, 50=>2.4167, 51=>3.0833, 52=>0.3125, 53=>0.0833, 54=>2.25, 55=>0, 56=>0),
        4=>array(0=>1.5333, 1=>61.4667, 2=>0.2, 3=>0.1333, 4=>0, 5=>0, 6=>0, 7=>0.0667, 8=>0, 9=>0, 10=>0, 11=>0.6, 12=>0.5333, 13=>0, 14=>0.4, 15=>0.1333, 16=>0, 17=>0.3333, 18=>0, 19=>6.0667, 20=>0, 21=>0, 22=>0, 23=>0, 24=>0, 25=>0, 26=>0, 27=>0, 28=>0, 29=>0, 30=>0, 31=>0, 32=>0, 33=>0, 34=>0, 35=>0, 36=>0, 37=>6.9333, 38=>0, 39=>0, 40=>2.4, 41=>0.2, 42=>4.6667, 43=>5.6, 44=>0, 45=>0, 46=>0.1333, 47=>0, 48=>0, 49=>0, 50=>0, 51=>0, 52=>0, 53=>4.2667, 54=>3.2, 55=>2.6, 56=>0));
         */
        /*
        $weights = array(0=>array(0=>3.333, 1=>0.6667, 2=>0.5738, 3=>0, 4=>0, 5=>0, 6=>1.375, 7=>0, 8=>0, 9=>0, 10=>0, 11=>0, 12=>0.5, 13=>0, 14=>0.0833, 15=>1.1667, 16=>0, 17=>0, 18=>0.5, 19=>0, 20=>3.5, 21=>0.125, 22=>2.75, 23=>3.75, 24=>2.333, 25=>0, 26=>0.3333, 27=>0.0833, 28=>0, 29=>0, 30=>0, 31=>0, 32=>0, 33=>0.1667, 34=>0, 35=>3.2083, 36=>4.0833, 37=>2.3333, 38=>0, 39=>0, 40=>0, 41=>0.8333, 42=>0, 43=>0, 44=>0, 45=>0, 46=>0, 47=>0, 48=>3.25, 49=>3.3333, 50=>0, 51=>2.2917, 52=>2.5, 53=>0, 54=>0.0833, 55=>1.75, 56=>2.9167, 57=>0),
        1=>array(0=>2.4186, 1=>1.5814, 2=>0.4935, 3=>1.6047, 4=>0.186, 5=>0, 6=>0.1163, 7=>1.2558, 8=>0.0698, 9=>1.1163, 10=>0.6977, 11=>2.3721, 12=>0.8372, 13=>1.5349, 14=>2.093, 15=>0.2093, 16=>0, 17=>0, 18=>0.814, 19=>0.2791, 20=>0.8837, 21=>0, 22=>0, 23=>0, 24=>0, 25=>1.4884, 26=>0, 27=>0, 28=>0, 29=>0.0465, 30=>1.0698, 31=>0, 32=>0, 33=>0.0465, 34=>0.8837, 35=>0, 36=>0.0465, 37=>0, 38=>0.0465, 39=>0, 40=>0.0233, 41=>5.6744, 42=>5.3488, 43=>0, 44=>0, 45=>2.5581, 46=>0, 47=>1.9535, 48=>1.814, 49=>0.814, 50=>1.3032, 51=>0.4186, 52=>1.814, 53=>0.186, 54=>0.093, 55=>1.1163, 56=>0, 57=>0),
        2=>array(0=>2, 1=>2, 2=>0.6038, 3=>0.2083, 4=>0.1667, 5=>0, 6=>0, 7=>0, 8=>0.125, 9=>0, 10=>0, 11=>0, 12=>0.625, 13=>0.5833, 14=>0, 15=>0.25, 16=>0.0833, 17=>0, 18=>0.2917, 19=>0, 20=>6.125, 21=>0, 22=>0, 23=>0, 24=>0, 25=>0, 26=>0, 27=>0, 28=>0, 29=>0, 30=>0, 31=>0, 32=>0, 33=>0, 34=>0, 35=>0, 36=>0, 37=>0, 38=>7, 39=>0, 40=>0, 41=>2.5, 42=>0.125, 43=>4.6667, 44=>5.25, 45=>0, 46=>0, 47=>0.1667, 48=>0, 49=>0, 50=>0, 51=>2.626, 52=>0, 53=>0, 54=>3.6667, 55=>2.3333, 56=>2.25, 57=>0),
        3=>array(0=>2.1667, 1=>1.8333, 2=>0.6279, 3=>0.5833, 4=>0.25, 5=>0.5833, 6=>0.2917, 7=>2.125, 8=>0, 9=>0, 10=>0, 11=>0, 12=>0, 13=>4.9583, 14=>3.5, 15=>0.5, 16=>0, 17=>0.4583, 18=>0, 19=>0.1667, 20=>0.4583, 21=>0, 22=>0, 23=>0, 24=>0, 25=>0, 26=>0, 27=>0, 28=>0, 29=>0, 30=>2, 31=>0, 32=>0.125, 33=>0, 34=>1.5, 35=>0, 36=>0.0833, 37=>0, 38=>0, 39=>0, 40=>0, 41=>3.8333, 42=>0, 43=>0, 44=>0, 45=>4.0833, 46=>6.75, 47=>0, 48=>0, 49=>7.875, 50=>0, 51=>4.0833, 52=>2.9167, 53=>0.2917, 54=>0, 55=>2.5, 56=>0, 57=>0));
         */

switch ($numCluster) {
    case 3:
        $weights = array(0 => array(0 => 0.84, 1 => 0.16, 2 => 0.576, 3 => 0, 4 => 0, 5 => 0, 6 => 1.36, 7 => 0, 8 => 0, 9 => 0, 10 => 0, 11 => 0, 12 => 0.48, 13 => 0, 14 => 0.08, 15 => 1.16, 16 => 0, 17 => 0.04, 18 => 0.48, 19 => 0, 20 => 3.4, 21 => 0.12, 22 => 2.64, 23 => 3.6, 24 => 2.24, 25 => 0, 26 => 0.32, 27 => 0.08, 28 => 0, 29 => 0, 30 => 0, 31 => 0, 32 => 0, 33 => 0.16, 34 => 0, 35 => 3.08, 36 => 4, 37 => 2.24, 38 => 0, 39 => 0, 40 => 0, 41 => 0.96, 42 => 0, 43 => 0, 44 => 0, 45 => 0.28, 46 => 0.36, 47 => 0, 48 => 3.12, 49 => 3.56, 50 => 0, 51 => 2.48, 52 => 2.68, 53 => 0, 54 => 0.08, 55 => 1.68, 56 => 2.8, 57 => 0),
            1 => array(0 => 0.5846, 1 => 0.4154, 2 => 0.5392, 3 => 1.2769, 4 => 0.2154, 5 => 0.2154, 6 => 0.1692, 7 => 1.6154, 8 => 0.0462, 9 => 0.6154, 10 => 0.3692, 11 => 1.5692, 12 => 0.5538, 13 => 2.8, 14 => 2.6, 15 => 0.3077, 16 => 0, 17 => 0.1538, 18 => 0.5385, 19 => 0.2462, 20 => 0.6615, 21 => 0, 22 => 0, 23 => 0, 24 => 0, 25 => 0.9846, 26 => 0, 27 => 0, 28 => 0, 29 => 0.0308, 30 => 1.4462, 31 => 0, 32 => 0.0462, 33 => 0.0308, 34 => 1.1385, 35 => 0, 36 => 0.0308, 37 => 0, 38 => 0.0154, 39 => 0, 40 => 0.0154, 41 => 5.0462, 42 => 3.5385, 43 => 0, 44 => 0, 45 => 3.0923, 46 => 2.3538, 47 => 1.2923, 48 => 1.2, 49 => 3.3077, 50 => 0.8615, 51 => 1.6769, 52 => 2.1692, 53 => 0.2308, 54 => 0.0615, 55 => 1.6615, 56 => 0, 57 => 0),
            2 => array(0 => 0.48, 1 => 0.52, 2 => 0.604, 3 => 0.2, 4 => 0.16, 5 => 0, 6 => 0, 7 => 0, 8 => 0.12, 9 => 0.32, 10 => 0.24, 11 => 0, 12 => 0.6, 13 => 0.68, 14 => 0.2, 15 => 0.24, 16 => 0.08, 17 => 0, 18 => 0.28, 19 => 0, 20 => 6.08, 21 => 0, 22 => 0, 23 => 0, 24 => 0, 25 => 0, 26 => 0, 27 => 0, 28 => 0, 29 => 0, 30 => 0, 31 => 0, 32 => 0, 33 => 0, 34 => 0, 35 => 0, 36 => 0, 37 => 0, 38 => 6.76, 39 => 0, 40 => 0, 41 => 2.56, 42 => 0.12, 43 => 4.48, 44 => 5.04, 45 => 0, 46 => 0, 47 => 0.16, 48 => 0, 49 => 0, 50 => 0, 51 => 2.52, 52 => 0, 53 => 0, 54 => 3.52, 55 => 2.24, 56 => 2.16, 57 => 0));
        break;

    case 4:
        $weights = array(0 => array(0 => 0.8333, 1 => 0.1667, 2 => 0.5738, 3 => 0, 4 => 0, 5 => 0, 6 => 1.375, 7 => 0, 8 => 0, 9 => 0, 10 => 0, 11 => 0, 12 => 0.5, 13 => 0, 14 => 0.0833, 15 => 1.1667, 16 => 0, 17 => 0, 18 => 0.5, 19 => 0, 20 => 3.5, 21 => 0.125, 22 => 2.75, 23 => 3.75, 24 => 2.333, 25 => 0, 26 => 0.3333, 27 => 0.0833, 28 => 0, 29 => 0, 30 => 0, 31 => 0, 32 => 0, 33 => 0.1667, 34 => 0, 35 => 3.2083, 36 => 4.0833, 37 => 2.3333, 38 => 0, 39 => 0, 40 => 0, 41 => 0.8333, 42 => 0, 43 => 0, 44 => 0, 45 => 0, 46 => 0, 47 => 0, 48 => 3.25, 49 => 3.3333, 50 => 0, 51 => 2.2917, 52 => 2.5, 53 => 0, 54 => 0.0833, 55 => 1.75, 56 => 2.9167, 57 => 0),
            1 => array(0 => 0.6047, 1 => 0.3953, 2 => 0.4935, 3 => 1.6047, 4 => 0.186, 5 => 0, 6 => 0.1163, 7 => 1.2558, 8 => 0.0698, 9 => 1.1163, 10 => 0.6977, 11 => 2.3721, 12 => 0.8372, 13 => 1.5349, 14 => 2.093, 15 => 0.2093, 16 => 0, 17 => 0, 18 => 0.814, 19 => 0.2791, 20 => 0.8837, 21 => 0, 22 => 0, 23 => 0, 24 => 0, 25 => 1.4884, 26 => 0, 27 => 0, 28 => 0, 29 => 0.0465, 30 => 1.0698, 31 => 0, 32 => 0, 33 => 0.0465, 34 => 0.8837, 35 => 0, 36 => 0.0465, 37 => 0, 38 => 0.0465, 39 => 0, 40 => 0.0233, 41 => 5.6744, 42 => 5.3488, 43 => 0, 44 => 0, 45 => 2.5581, 46 => 0, 47 => 1.9535, 48 => 1.814, 49 => 0.814, 50 => 1.3023, 51 => 0.4186, 52 => 1.814, 53 => 0.186, 54 => 0.093, 55 => 1.1163, 56 => 0, 57 => 0),
            2 => array(0 => 0.5, 1 => 0.5, 2 => 0.6038, 3 => 0.2083, 4 => 0.1667, 5 => 0, 6 => 0, 7 => 0, 8 => 0.125, 9 => 0, 10 => 0, 11 => 0, 12 => 0.625, 13 => 0.5833, 14 => 0, 15 => 0.25, 16 => 0.0833, 17 => 0, 18 => 0.2917, 19 => 0, 20 => 6.125, 21 => 0, 22 => 0, 23 => 0, 24 => 0, 25 => 0, 26 => 0, 27 => 0, 28 => 0, 29 => 0, 30 => 0, 31 => 0, 32 => 0, 33 => 0, 34 => 0, 35 => 0, 36 => 0, 37 => 0, 38 => 7, 39 => 0, 40 => 0, 41 => 2.5, 42 => 0.125, 43 => 4.6667, 44 => 5.25, 45 => 0, 46 => 0, 47 => 0.1667, 48 => 0, 49 => 0, 50 => 0, 51 => 2.625, 52 => 0, 53 => 0, 54 => 3.6667, 55 => 2.3333, 56 => 2.25, 57 => 0),
            3 => array(0 => 0.5417, 1 => 0.4583, 2 => 0.6279, 3 => 0.5833, 4 => 0.25, 5 => 0.5833, 6 => 0.2917, 7 => 2.125, 8 => 0, 9 => 0, 10 => 0, 11 => 0, 12 => 0, 13 => 4.9583, 14 => 3.5, 15 => 0.5, 16 => 0, 17 => 0.4583, 18 => 0, 19 => 0.1667, 20 => 0.4583, 21 => 0, 22 => 0, 23 => 0, 24 => 0, 25 => 0, 26 => 0, 27 => 0, 28 => 0, 29 => 0, 30 => 2, 31 => 0, 32 => 0.125, 33 => 0, 34 => 1.5, 35 => 0, 36 => 0.0833, 37 => 0, 38 => 0, 39 => 0, 40 => 0, 41 => 3.8333, 42 => 0, 43 => 0, 44 => 0, 45 => 4.0833, 46 => 6.75, 47 => 0, 48 => 0, 49 => 7.875, 50 => 0, 51 => 4.0833, 52 => 2.9167, 53 => 0.2917, 54 => 0, 55 => 2.5, 56 => 0, 57 => 0));
        break;
    
    case 5:
        $weights = array(0 => array(0 => 0.8333, 1 => 0.1667, 2 => 0.5738, 3 => 0, 4 => 0, 5 => 0, 6 => 1.375, 7 => 0, 8 => 0, 9 => 0, 10 => 0, 11 => 0, 12 => 0.5, 13 => 0, 14 => 0.0833, 15 => 1.1667, 16 => 0, 17 => 0, 18 => 0.5, 19 => 0, 20 => 3.5, 21 => 0.125, 22 => 2.75, 23 => 3.75, 24 => 2.333, 25 => 0, 26 => 0.3333, 27 => 0.0833, 28 => 0, 29 => 0, 30 => 0, 31 => 0, 32 => 0, 33 => 0.1667, 34 => 0, 35 => 3.2083, 36 => 4.0833, 37 => 2.3333, 38 => 0, 39 => 0, 40 => 0, 41 => 0.8333, 42 => 0, 43 => 0, 44 => 0, 45 => 0, 46 => 0, 47 => 0, 48 => 3.25, 49 => 3.3333, 50 => 0, 51 => 2.2917, 52 => 2.5, 53 => 0, 54 => 0.0833, 55 => 1.75, 56 => 2.9167, 57 => 0),
            1 => array(0 => 0.6047, 1 => 0.3953, 2 => 0.4935, 3 => 1.6047, 4 => 0.186, 5 => 0, 6 => 0.1163, 7 => 1.2558, 8 => 0.0698, 9 => 1.1163, 10 => 0.6977, 11 => 2.3721, 12 => 0.8372, 13 => 1.5349, 14 => 2.093, 15 => 0.2093, 16 => 0, 17 => 0, 18 => 0.814, 19 => 0.2791, 20 => 0.8837, 21 => 0, 22 => 0, 23 => 0, 24 => 0, 25 => 1.4884, 26 => 0, 27 => 0, 28 => 0, 29 => 0.0465, 30 => 1.0698, 31 => 0, 32 => 0, 33 => 0.0465, 34 => 0.8837, 35 => 0, 36 => 0.0465, 37 => 0, 38 => 0.0465, 39 => 0, 40 => 0.0233, 41 => 5.6744, 42 => 5.3488, 43 => 0, 44 => 0, 45 => 2.5581, 46 => 0, 47 => 1.9535, 48 => 1.814, 49 => 0.814, 50 => 1.3023, 51 => 0.4186, 52 => 1.814, 53 => 0.186, 54 => 0.093, 55 => 1.1163, 56 => 0, 57 => 0),
            2 => array(0 => 0.56, 1 => 0.44, 2 => 0.5856, 3 => 0.2222, 4 => 0.2222, 5 => 0, 6 => 0, 7 => 0, 8 => 0.2222, 9 => 0, 10 => 0, 11 => 0, 12 => 0.6667, 13 => 0.6667, 14 => 0, 15 => 0, 16 => 0, 17 => 0, 18 => 0.2222, 19 => 0, 20 => 6.2222, 21 => 0, 22 => 0, 23 => 0, 24 => 0, 25 => 0, 26 => 0, 27 => 0, 28 => 0, 29 => 0, 30 => 0, 31 => 0, 32 => 0, 33 => 0, 34 => 0, 35 => 0, 36 => 0, 37 => 0, 38 => 7.11, 39 => 0, 40 => 0, 41 => 2.67, 42 => 0, 43 => 4.6667, 44 => 4.6667, 45 => 0, 46 => 0, 47 => 0.2222, 48 => 0, 49 => 0, 50 => 0, 51 => 7, 52 => 0, 53 => 0, 54 => 2.6667, 55 => 0.8889, 56 => 1.6667, 57 => 0),
            3 => array(0 => 0.5417, 1 => 0.4583, 2 => 0.6279, 3 => 0.5833, 4 => 0.25, 5 => 0.5833, 6 => 0.2917, 7 => 2.125, 8 => 0, 9 => 0, 10 => 0, 11 => 0, 12 => 0, 13 => 4.9583, 14 => 3.5, 15 => 0.5, 16 => 0, 17 => 0.4583, 18 => 0, 19 => 0.1667, 20 => 0.4583, 21 => 0, 22 => 0, 23 => 0, 24 => 0, 25 => 0, 26 => 0, 27 => 0, 28 => 0, 29 => 0, 30 => 2, 31 => 0, 32 => 0.125, 33 => 0, 34 => 1.5, 35 => 0, 36 => 0.0833, 37 => 0, 38 => 0, 39 => 0, 40 => 0, 41 => 3.8333, 42 => 0, 43 => 0, 44 => 0, 45 => 4.0833, 46 => 6.75, 47 => 0, 48 => 0, 49 => 7.875, 50 => 0, 51 => 4.0833, 52 => 2.9167, 53 => 0.2917, 54 => 0, 55 => 2.5, 56 => 0, 57 => 0),
            4 => array(0 => 0.4667, 1 => 0.5333, 2 => 0.6147, 3 => 0.2, 4 => 0.1333, 5 => 0, 6 => 0, 7 => 0, 8 => 0.0667, 9 => 0, 10 => 0, 11 => 0, 12 => 0.6, 13 => 0.5333, 14 => 0, 15 => 0.4, 16 => 0.1333, 17 => 0, 18 => 0.3333, 19 => 0, 20 => 6.0667, 21 => 0, 22 => 0, 23 => 0, 24 => 0, 25 => 0, 26 => 0, 27 => 0, 28 => 0, 29 => 0, 30 => 0, 31 => 0, 32 => 0, 33 => 0, 34 => 0, 35 => 0, 36 => 0, 37 => 0, 38 => 6.9333, 39 => 0, 40 => 0, 41 => 2.4, 42 => 0.2, 43 => 4.6667, 44 => 5.6, 45 => 0, 46 => 0, 47 => 0.1333, 48 => 0, 49 => 0, 50 => 0, 51 => 0, 52 => 0, 53 => 0, 54 => 4.2667, 55 => 3.2, 56 => 2.6, 57 => 0));
        break;
        
    case 7:
        $weights = array(0 => array(0 => 0.75, 1 => 0.25, 2 => 0.5658, 3 => 0, 4 => 0, 5 => 0, 6 => 0.5, 7 => 0, 8 => 0, 9 => 0, 10 => 0, 11 => 0, 12 => 0.3333, 13 => 0, 14 => 0, 15 => 1.3333, 16 => 0, 17 => 0, 18 => 0.8333, 19 => 0, 20 => 4, 21 => 0, 22 => 2.5, 23 => 4.5, 24 => 2.9167, 25 => 0, 26 => 0.3333, 27 => 0.0833, 28 => 0, 29 => 0, 30 => 0, 31 => 0, 32 => 0, 33 => 0.1667, 34 => 0, 35 => 4.0833, 36 => 4.6667, 37 => 1.1667, 38 => 0, 39 => 0, 40 => 0, 41 => 0.8333, 42 => 0, 43 => 0, 44 => 0, 45 => 0, 46 => 0, 47 => 0, 48 => 1.5, 49 => 2.0833, 50 => 0, 51 => 3.3333, 52 => 3.5, 53 => 0, 54 => 0.1667, 55 => 1, 56 => 4.6667, 57 => 0),
            1 => array(0 => 0.5882, 1 => 0.4118, 2 => 0.4053, 3 => 3.1765, 4 => 0.4706, 5 => 0, 6 => 0.1765, 7 => 0.3529, 8 => 0.1765, 9 => 2.8235, 10 => 1.7647, 11 => 0, 12 => 2.1176, 13 => 1.0588, 14 => 3.2353, 15 => 0.2353, 16 => 0, 17 => 0, 18 => 2.1176, 19 => 0, 20 => 0, 21 => 0, 22 => 0, 23 => 2.8235, 24 => 0, 25 => 0, 26 => 0, 27 => 0.1176, 28 => 0.3529, 29 => 0, 30 => 0.3529, 31 => 0, 32 => 0, 33 => 0.1176, 34 => 0.2353, 35 => 0, 36 => 0.1176, 37 => 0, 38 => 0.1176, 39 => 0, 40 => 0, 41 => 3.8824, 42 => 1.1765, 43 => 0, 44 => 0, 45 => 0, 46 => 0, 47 => 0, 48 => 0, 49 => 1.4706, 50 => 3.2941, 51 => 0, 52 => 0, 53 => 0, 54 => 0, 55 => 0, 56 => 0, 57 => 0),
            2 => array(0 => 0.5556, 1 => 0.4444, 2 => 0.5856, 3 => 0.2222, 4 => 0.2222, 5 => 0, 6 => 0, 7 => 0, 8 => 0.2222, 9 => 0, 10 => 0, 11 => 0, 12 => 0.6667, 13 => 0.6667, 14 => 0, 15 => 0, 16 => 0, 17 => 0, 18 => 0.2222, 19 => 0, 20 => 6.2222, 21 => 0, 22 => 0, 23 => 0, 24 => 0, 25 => 0, 26 => 0, 27 => 0, 28 => 0, 29 => 0, 30 => 0, 31 => 0, 32 => 0, 33 => 0, 34 => 0, 35 => 0, 36 => 0, 37 => 0, 38 => 7.1111, 39 => 0, 40 => 0, 41 => 2.6667, 42 => 0, 43 => 4.6667, 44 => 4.6667, 45 => 0, 46 => 0, 47 => 0.2222, 48 => 0, 49 => 0, 50 => 0, 51 => 7, 52 => 0, 53 => 0, 54 => 2.6667, 55 => 0.8889, 56 => 1.6667, 57 => 0),
            3 => array(0 => 0.5417, 1 => 0.4583, 2 => 0.6279, 3 => 0.5833, 4 => 0.25, 5 => 0.5833, 6 => 0.2917, 7 => 2.125, 8 => 0, 9 => 0, 10 => 0, 11 => 0, 12 => 0, 13 => 4.9583, 14 => 3.5, 15 => 0.5, 16 => 0, 17 => 0.4583, 18 => 0, 19 => 0.1667, 20 => 0.4583, 21 => 0, 22 => 0, 23 => 0, 24 => 0, 25 => 0, 26 => 0, 27 => 0, 28 => 0, 29 => 0, 30 => 2, 31 => 0, 32 => 0.125, 33 => 0, 34 => 1.5, 35 => 0, 36 => 0.0833, 37 => 0, 38 => 0, 39 => 0, 40 => 0, 41 => 3.8333, 42 => 0, 43 => 0, 44 => 0, 45 => 4.0833, 46 => 6.75, 47 => 0, 48 => 0, 49 => 7.875, 50 => 0, 51 => 4.0833, 52 => 2.9167, 53 => 0.2917, 54 => 0, 55 => 2.5, 56 => 0, 57 => 0),
            4 => array(0 => 0.4667, 1 => 0.5333, 2 => 0.6147, 3 => 0.2, 4 => 0.1333, 5 => 0, 6 => 0, 7 => 0, 8 => 0.0667, 9 => 0, 10 => 0, 11 => 0, 12 => 0.6, 13 => 0.5333, 14 => 0, 15 => 0.4, 16 => 0.1333, 17 => 0, 18 => 0.3333, 19 => 0, 20 => 6.0667, 21 => 0, 22 => 0, 23 => 0, 24 => 0, 25 => 0, 26 => 0, 27 => 0, 28 => 0, 29 => 0, 30 => 0, 31 => 0, 32 => 0, 33 => 0, 34 => 0, 35 => 0, 36 => 0, 37 => 0, 38 => 6.9333, 39 => 0, 40 => 0, 41 => 2.4, 42 => 0.2, 43 => 4.6667, 44 => 5.6, 45 => 0, 46 => 0, 47 => 0.1333, 48 => 0, 49 => 0, 50 => 0, 51 => 0, 52 => 0, 53 => 0, 54 => 4.2667, 55 => 3.2, 56 => 2.6, 57 => 0),
            5 => array(0 => 0.9167, 1 => 0.0833, 2 => 0.5817, 3 => 0, 4 => 0, 5 => 0, 6 => 2.25, 7 => 0, 8 => 0, 9 => 0, 10 => 0, 11 => 0, 12 => 0.6667, 13 => 0, 14 => 0.1667, 15 => 1, 16 => 0, 17 => 0, 18 => 0.1667, 19 => 0, 20 => 3, 21 => 0.25, 22 => 3, 23 => 3, 24 => 1.75, 25 => 0, 26 => 0.3333, 27 => 0.0833, 28 => 0, 29 => 0, 30 => 0, 31 => 0, 32 => 0, 33 => 0.1667, 34 => 0, 35 => 2.3333, 36 => 3.5, 37 => 3.5, 38 => 0, 39 => 0, 40 => 0, 41 => 0.8333, 42 => 0, 43 => 0, 44 => 0, 45 => 0, 46 => 0, 47 => 0, 48 => 5, 49 => 4.5833, 50 => 0, 51 => 1.25, 52 => 1.5, 53 => 0, 54 => 0, 55 => 2.5, 56 => 1.1667, 57 => 0),
            6 => array(0 => 0.6154, 1 => 0.3846, 2 => 0.5512, 3 => 0.5769, 4 => 0, 5 => 0, 6 => 0.0769, 7 => 1.8462, 8 => 0, 9 => 0, 10 => 0, 11 => 3.9231, 12 => 0, 13 => 1.8462, 14 => 1.3462, 15 => 0.1923, 16 => 0, 17 => 0, 18 => 1.1923, 19 => 0.4615, 20 => 0.0769, 21 => 0, 22 => 0, 23 => 0, 24 => 0, 25 => 0.6154, 26 => 0, 27 => 0, 28 => 0, 29 => 0, 30 => 1.5385, 31 => 0, 32 => 0, 33 => 0, 34 => 1.3077, 35 => 0, 36 => 0, 37 => 0, 38 => 0, 39 => 0, 40 => 0.0385, 41 => 6.8462, 42 => 8.0769, 43 => 0, 44 => 0, 45 => 4.2308, 46 => 0, 47 => 3.2308, 48 => 3, 49 => 0.3846, 50 => 0, 51 => 0.6923, 52 => 3, 53 => 0.3077, 54 => 0.1538, 55 => 1.8462, 56 => 0, 57 => 0));
        break;
}

        $newWeights = $weights;
        $lRate      = $learningRate;

        $gejala = $this->gejala->fields('kode_gejala')->get_all();

        $query        = $this->bobot_gejala->get_all();
        $bobot_gejala = array();
        foreach ($query as $row) {
            $bobot_gejala[$row->kode_gejala][$row->kode_penyakit] = $row->bobot;
        }

        $query = $this->basis_kasus->with_kasus_detail('fields:kode_gejala')->get_all();

        $records = array();
        $primary = array();
        $i       = 0;
        foreach ($query as $row) {
            $primary[$i] = $row->kode_kasus;
            if ($row->jk == '1') {
                $records[$i][0] = 1;
                $records[$i][1] = 0;
            } else {
                $records[$i][0] = 0;
                $records[$i][1] = 1;
            }
            $records[$i][2] = $this->norm_age($row->usia);

            $kasus_detail = array();
            if (!empty($row->kasus_detail)) {
                foreach ($row->kasus_detail as $value) {
                    $kasus_detail[] = $value->kode_gejala;
                }
            }

            $j = 3;
            foreach ($gejala as $value) {
                $records[$i][$j++] = (in_array($value->kode_gejala, $kasus_detail)) ? $bobot_gejala[$value->kode_gejala][$row->kode_penyakit] : 0;
            }
            $i++;
        }

        $this->benchmark->mark('code_start');
        for ($iterasi = 1; $iterasi <= $maxIterasi; $iterasi++) {
            $som = new SOM($primary, $records, $newWeights, $numCluster, $learningRate);

            $newWeights = array();
            $tmpWeights = array();
            $clusters   = array();

            $newWeights = $som->getNewWeight();

            if ($newWeights == $tmpWeights) {
                break;
            } else {
                $tmpWeights = $newWeights;
            }

            $learningRate = $learningRate * $toLearningRate;
        }
        $this->benchmark->mark('code_end'); 

        $clusters = $som->getClusters();
        $silhoutteIndex         = new Silhoutte_index();
        $data['silhoutteIndex'] = $silhoutteIndex->getValue($som->getClustersValue());

        $this->benchmark->mark('code_end');

        $data['page_header']    = $this->page_header;
        $data['panel_heading']  = 'Training dengan ' . $maxIterasi . ' Iterasi, ' . $numCluster . ' Cluster, Learning rate ' . $lRate . ' to ' . $toLearningRate . ' dan Silhoutte index ' . $data['silhoutteIndex'];
        $data['table']          = $this->lihat_hasil_som($newWeights, $numCluster);
        $data['clusters']       = $clusters;
        $data['centroids']      = $newWeights;
        $data['weights']        = $weights;
        $data['gejala']         = $gejala;
        $data['maxIterasi']     = $maxIterasi;
        $data['learningRate']   = $lRate;
        $data['toLearningRate'] = $toLearningRate;

        $data['elapsed_time'] = $this->benchmark->elapsed_time('code_start', 'code_end');

        $data['page'] = 'training';

        $this->frontend->view('som_v', $data);
    }

    public function save_training()
    {
        $clusters   = unserialize($this->input->post('clusters'));
        $centroids  = unserialize($this->input->post('centroids'));
        $weights    = unserialize($this->input->post('weights'));
        $gejala     = unserialize($this->input->post('gejala'));
        $maxIterasi = unserialize($this->input->post('maxIterasi'));

        $learningRate   = unserialize($this->input->post('learningRate'));
        $toLearningRate = unserialize($this->input->post('toLearningRate'));
        $silhoutteIndex = unserialize($this->input->post('silhoutteIndex'));

        $n = count($clusters);

        $query = $this->klaster->delete(array('metode' => $this->metode));

        $query = $this->pusat_klaster->delete(array('metode' => $this->metode));

        for ($i = 0; $i < $n; $i++) {
            $rows = array();
            foreach ($clusters[$i] as $value) {
                $rows[] = array('kode_kasus' => $value, 'metode' => $this->metode, 'klaster' => ($i + 1));
            }

            $this->klaster->insert($rows);

            $rows    = array();
            $rows[0] = array('klaster' => ($i + 1), 'no' => 1, 'metode' => $this->metode, 'atribut' => 'lk', 'bobot' => $centroids[$i][0]);
            $rows[1] = array('klaster' => ($i + 1), 'no' => 2, 'metode' => $this->metode, 'atribut' => 'pr', 'bobot' => $centroids[$i][1]);
            $rows[2] = array('klaster' => ($i + 1), 'no' => 3, 'metode' => $this->metode, 'atribut' => 'usia', 'bobot' => $centroids[$i][2]);
            $j       = 3;
            foreach ($gejala as $value) {
                $rows[$j] = array('klaster' => ($i + 1), 'no' => $j + 1, 'metode' => $this->metode, 'atribut' => $value->kode_gejala, 'bobot' => $centroids[$i][$j++]);
            }

            $this->pusat_klaster->insert($rows);
        }

        $this->inisiasi_klaster->update(array('jumlah_klaster' => count($clusters), 'max_iterasi' => $maxIterasi, 'learning_rate' => $learningRate, 'to_learning_rate' => $toLearningRate, 'silhoutte_index' => $silhoutteIndex), array('metode' => $this->metode));
        
        echo array("status" => true);
    }

    public function lihat_hasil_som($centroids, $numCluster)
    {
        $gejala = $this->gejala->fields('kode_gejala')->get_all();

        if (count($centroids) <= 0) {
            return false;
        }

        $table = '<table class="table table-striped table-bordered table-hover"><tr><th>Klaster</th><th>Lk</th><th>Pr</th><th>Usia</th>';
        foreach ($gejala as $value) {
            $table .= '<th>' . $value->kode_gejala . '</th>';
        }
        $table .= '</tr>';

        for ($a = 0; $a < $numCluster; $a++) {
            $table .= '<tr><td width="7px"><b>C ' . ($a + 1) . '</b></td>';
            for ($b = 0; $b < count($centroids[0]); $b++) {
                $table .= '<td>' . round($centroids[$a][$b], 5) . '</td>';
            }

            $table .= '</tr>';
        }
        $table .= '</table>';

        return $table;
    }

//SOM Bagus Kalo Dibagi 100
    private function norm_age($usia)
    {
        $max_usia    = $this->basis_kasus->get_max()->max_usia;
        $min_usia    = $this->basis_kasus->get_min()->min_usia;

        return ($usia - $min_usia) / ($max_usia - $min_usia);
    }


}
